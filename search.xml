<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>myFirst(EJS)</title>
      <link href="/2024/10/15/myFirst/"/>
      <url>/2024/10/15/myFirst/</url>
      
        <content type="html"><![CDATA[<h2 id="EJS-Embedded-Javascript"><a href="#EJS-Embedded-Javascript" class="headerlink" title="EJS(Embedded Javascript)"></a>EJS(Embedded Javascript)</h2><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><pre class="line-numbers language-none"><code class="language-none">var express &#x3D; require(&#39;express&#39;);var app &#x3D; express();app.set(&#39;view engine&#39;, &#39;ejs&#39;);app.get(&#39;&#x2F;&#39;, function (req, res) &#123;  res.render(&#39;index&#39;, &#123;    game: &#39;Final Fantasy VII&#39;,    category: &#39;&lt;p&gt;&lt;b&gt;Characters:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;&#39;,    characters: [&#39;Cloud&#39;, &#39;Aerith&#39;, &#39;Tifa&#39;, &#39;Barret&#39;]  &#125;);&#125;);app.listen(3000, function() &#123;  console.log(&#39;Example app listening on port 3000!&#39;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title="&lt;%&#x3D;%&gt;"></a>&lt;%&#x3D;%&gt;</h2><h6 id="將-res-render-‘index’-…-輸出過來的變數當值來使用。"><a href="#將-res-render-‘index’-…-輸出過來的變數當值來使用。" class="headerlink" title="將 res.render(‘index’,{…}); 輸出過來的變數當值來使用。"></a>將 res.render(‘index’,{…}); 輸出過來的變數當值來使用。</h6><pre class="line-numbers language-none"><code class="language-none">也就是說 &lt;%&#x3D; game %&gt; 的 game 就是 game:&#39;Final Fantasy VII&#39;，所以這段內容 &#x3D;&#x3D;&lt;h1&gt;&lt;%&#x3D; game %&gt;&lt;&#x2F;h1&gt;&#x3D;&#x3D;等於 &lt;h1&gt;Final Fantasy VII&lt;&#x2F;h1&gt;。你就把它當作像是呼叫函式時，所傳輸過去的『參數』，這樣會比較好理解。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="-1"><a href="#-1" class="headerlink" title="&lt;%-%&gt;"></a>&lt;%-%&gt;</h2><h6 id="將-res-render-‘index’-…-輸出過來的變數做保留字元來使用。"><a href="#將-res-render-‘index’-…-輸出過來的變數做保留字元來使用。" class="headerlink" title="將 res.render(‘index’,{…}); 輸出過來的變數做保留字元來使用。"></a>將 res.render(‘index’,{…}); 輸出過來的變數做保留字元來使用。</h6><pre class="line-numbers language-none"><code class="language-none">也就是說其變數送過來後，會被當作 HTML 語法來使用。因此 &lt;%- category %&gt; 變成 &lt;p&gt;&lt;b&gt;Characters:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="-2"><a href="#-2" class="headerlink" title="&lt;% %&gt;"></a>&lt;% %&gt;</h2><h6 id="將標籤內的內容，當作程式邏輯來使用，像是-if-else-判斷式、for-迴圈。"><a href="#將標籤內的內容，當作程式邏輯來使用，像是-if-else-判斷式、for-迴圈。" class="headerlink" title="將標籤內的內容，當作程式邏輯來使用，像是 if else 判斷式、for 迴圈。"></a>將標籤內的內容，當作程式邏輯來使用，像是 if else 判斷式、for 迴圈。</h6><pre class="line-numbers language-none"><code class="language-none">&lt;%for(var i&#x3D;0;i&lt;characters.length;i++)&#123;%&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上圖就是迴圈處理，<br>把 characters 陣列裡的成員，依照清單方式一一印出來</p><pre class="line-numbers language-none"><code class="language-none">( &lt;li&gt;&lt;%&#x3D; characters[i]%&gt;&lt;&#x2F;li&gt; )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h1><h2 id="morgan"><a href="#morgan" class="headerlink" title="morgan"></a><a href="https://www.npmjs.com/package/morgan">morgan</a></h2><hr><h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><h2 id="增加blog到mongodb"><a href="#增加blog到mongodb" class="headerlink" title="增加blog到mongodb"></a>增加blog到mongodb</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;mongoose and mongo sandbox routes  app.get(&#39;&#x2F;add-blog&#39;,(req,res)&#x3D;&gt;&#123;    const blog &#x3D; new Blog(&#123;        title: &#39;new blog2&#39;,        snippet: &#39;about my new blog&#39;,        body: &#39;more about my new blog&#39;    &#125;);    blog.save()        .then((result)&#x3D;&gt;&#123;            res.send(result);        &#125;)        .catch((err)&#x3D;&gt;&#123;           console.log(err);         &#125;)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顯示所有db資料"><a href="#顯示所有db資料" class="headerlink" title="顯示所有db資料"></a>顯示所有db資料</h2><pre class="line-numbers language-none"><code class="language-none">app.get(&#39;&#x2F;all-blog&#39;,(req,res)&#x3D;&gt;&#123;    Blog.find()        .then((result)&#x3D;&gt;&#123;            res.send(result);        &#125;)        .catch((err)&#x3D;&gt;&#123;            console.log(err);        &#125;);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="選擇單一資料利用findById"><a href="#選擇單一資料利用findById" class="headerlink" title="選擇單一資料利用findById"></a>選擇單一資料利用findById</h2><pre class="line-numbers language-none"><code class="language-none">app.get(&#39;&#x2F;single-blog&#39;,(req,res)&#x3D;&gt;&#123;    Blog.findById(&#39;622f017be5574e63d3fc3bdf&#39;)    .then((result)&#x3D;&gt;&#123;        res.send(result);    &#125;)    .catch((err)&#x3D;&gt;&#123;        console.log(err);    &#125;);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="GET-POST-差別"><a href="#GET-POST-差別" class="headerlink" title="GET &#x2F; POST 差別"></a><a href="https://ithelp.ithome.com.tw/articles/10189578">GET &#x2F; POST 差別</a></h1><h2 id="GET-和-POST-同樣都能傳送值"><a href="#GET-和-POST-同樣都能傳送值" class="headerlink" title="GET 和 POST 同樣都能傳送值"></a>GET 和 POST 同樣都能傳送值</h2><ul><li>GET 會把要傳送的值放在header上，會直接顯示在URL，因此不適合傳輸隱密的資料，<br> 同時 GET 會被Cache紀錄、且有長度限制</li><li>POST是把資料放在訊息主體內進行傳送，不會被Cache紀錄且對資料長度沒有限制，<br> 因此POST比GET更安全，所以較適合用來傳送隱密性較高的資料</li></ul><hr><h1 id="res-req"><a href="#res-req" class="headerlink" title="res &#x2F; req"></a><a href="https://expressjs.com/zh-tw/guide/routing.html">res &#x2F; req</a></h1><table><thead><tr><th>方法</th><th>說明</th></tr></thead><tbody><tr><td>res.download()</td><td>提示您提供要下載的檔案。</td></tr><tr><td>res.end()</td><td>結束回應程序。</td></tr><tr><td>res.json()</td><td>傳送 JSON 回應。</td></tr><tr><td>res.jsonp()</td><td>傳送 JSON 回應，並支援 JSONP。</td></tr><tr><td>res.redirect()</td><td>將要求重新導向。</td></tr><tr><td>res.render()</td><td>呈現視圖範本。</td></tr><tr><td>res.send()</td><td>傳送各種類型的回應。</td></tr><tr><td>res.sendFile()</td><td>以八位元組串流形式傳送檔案。</td></tr><tr><td>res.sendStatus()</td><td>設定回應狀態碼，並以回應內文形式傳送其字串表示法。</td></tr></tbody></table><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/14/hello-world/"/>
      <url>/2024/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
