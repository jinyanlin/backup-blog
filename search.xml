<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2024/10/17/test/"/>
      <url>/2024/10/17/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ecommerence</title>
      <link href="/2024/10/17/ecommerence/"/>
      <url>/2024/10/17/ecommerence/</url>
      
        <content type="html"><![CDATA[<h1 id="Shopping-Cart-with-PHP-laravel"><a href="#Shopping-Cart-with-PHP-laravel" class="headerlink" title="Shopping Cart with PHP laravel"></a>Shopping Cart with PHP laravel</h1><p>GitHub : <a href="https://github.com/jinyanlin/shopping-cart-php-laravel">project 作品</a></p><h4 id="此專題為了改進畢業專題購物車系統，提供下列功能"><a href="#此專題為了改進畢業專題購物車系統，提供下列功能" class="headerlink" title="此專題為了改進畢業專題購物車系統，提供下列功能 :"></a><strong>此專題為了改進畢業專題購物車系統，提供下列功能 :</strong></h4><ul><li>使用Facebook和Google api登入</li><li>產品名稱搜尋</li><li>即時顯示願望清單和購物車數量</li><li>結帳時可使用Paypal和ECPAY</li></ul><h1 id="專題介紹"><a href="#專題介紹" class="headerlink" title="專題介紹"></a>專題介紹</h1><h2 id="首頁"><a href="#首頁" class="headerlink" title="首頁"></a>首頁</h2><p><strong>使用者未登入時的首頁會列出特價熱門商品。</strong></p><h2 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h2><p><strong>使用FaceBook 與 Google 第三方登入串接。</strong><br><img src="/.com//login.jpg" alt="登入"></p><h2 id="搜尋"><a href="#搜尋" class="headerlink" title="搜尋"></a>搜尋</h2><p><strong>可在對話框內搜尋想要的關鍵字，會及時列出相關商品，亦可直接點選商品按搜尋即可找尋該商品。</strong><br><img src="/.com//search.jpg" alt="搜尋"></p><h2 id="商品介紹"><a href="#商品介紹" class="headerlink" title="商品介紹"></a>商品介紹</h2><p><strong>商品會出現圖片、售價、是否有存貨、加入願望清單與購物車。</strong><br><img src="/.com//product.jpg" alt="商品介紹"></p><h2 id="願望清單"><a href="#願望清單" class="headerlink" title="願望清單"></a>願望清單</h2><p><strong>可供用戶有購買的想法但不想加入購物車的功能。</strong><br><img src="/.com//wishlist.jpg" alt="願望清單"></p><h2 id="購物車"><a href="#購物車" class="headerlink" title="購物車"></a>購物車</h2><p><strong>用戶查看當前你想購買的物品。</strong><br><img src="/.com//cart.jpg" alt="購物車"></p><h2 id="ECPAY"><a href="#ECPAY" class="headerlink" title="ECPAY"></a>ECPAY</h2><p><strong>使用綠界付款</strong><br><img src="/.com//ecpay.jpg" alt="ECPAY"></p>]]></content>
      
      
      <categories>
          
          <category> PHP(Laravel) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Google/Facebook API </tag>
            
            <tag> Paypal </tag>
            
            <tag> ECpay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GET/POST</title>
      <link href="/2024/10/16/GET-POST/"/>
      <url>/2024/10/16/GET-POST/</url>
      
        <content type="html"><![CDATA[<h1 id="What-is-HTTP"><a href="#What-is-HTTP" class="headerlink" title="What is HTTP?"></a>What is HTTP?</h1><p><strong>旨在實現客戶端和伺服器之間的通訊。</strong><br>Example: 客戶端（瀏覽器）向伺服器發送HTTP請求；然後伺服器回傳響應給客戶端。回應包含有關請求的狀態訊息，也可能包含請求的內容。<br><img src="https://miro.medium.com/v2/resize:fit:720/format:webp/0*s2u2kEx-8rAhxGaW" alt="Photo by Django Request and Response Lifecycle"></p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>全名 HyperText Transfer Protocol，中文為超文本傳輸協定</strong></p><ul><li>是全球資訊網的通訊基礎，當我們在上網或網頁前端跟後端做溝通時就要遵照 HTTP 「協定」</li><li>預設 port ：80</li></ul><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p><strong>全名 HyperText Transfer Protocol Secure，中文為超文本傳輸安全協定</strong></p><ul><li>由於 HTTP 一直都有 安全性的問題，因此 HTTPS 就是基於 HTTP 並利用 SSL&#x2F;TLS 將資訊加密封包的另一種更安全的協定。</li><li>預設 port ：443</li></ul><h2 id="HTTP-Methods"><a href="#HTTP-Methods" class="headerlink" title="HTTP Methods"></a>HTTP Methods</h2><ul><li>GET</li><li>POST</li><li>PUT</li><li>HEAD</li><li>DELETE</li><li>PATCH</li><li>OPTIONS</li><li>CONNECT</li><li>TRACE</li></ul><hr><h3 id="The-GET-Method"><a href="#The-GET-Method" class="headerlink" title="The GET Method"></a>The GET Method</h3><p><strong>GET 用於從指定資源請求資料。</strong></p><p>查詢字串（名稱&#x2F;值對）在 GET 請求的 URL 中傳送：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/test/demo_form.php?name1=value1&amp;name2=value2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><b>關於 GET 請求的一些注意事項：</b></p><ul><li>GET請求可以被緩存</li><li>GET請求保留在瀏覽器記錄中</li><li>可以為 GET 請求添加書籤</li><li>處理敏感資料時切勿使用 GET 請求</li><li>GET 請求有長度限制</li><li>GET請求僅用於請求資料（不修改）</li></ul><h3 id="The-POST-Method"><a href="#The-POST-Method" class="headerlink" title="The POST Method"></a>The POST Method</h3><p><strong>POST 用於將資料傳送到伺服器以建立&#x2F;更新資源。</strong></p><p>透過POST傳送到伺服器的資料儲存在HTTP Request請求中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">POST /test/demo_form.php HTTP/1.1Host: w3schools.comname1=value1&amp;name2=value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><b>關於 POST 請求的一些注意事項：</b></p><ul><li>POST 請求永遠不會被緩存</li><li>POST 請求不會保留在瀏覽器記錄中</li><li>POST 請求無法添加書籤</li><li>POST請求對資料長度沒有限制</li></ul><h2 id="GET-和-POST-同樣都能傳送值"><a href="#GET-和-POST-同樣都能傳送值" class="headerlink" title="GET 和 POST 同樣都能傳送值"></a>GET 和 POST 同樣都能傳送值</h2><ul><li>GET 會把要傳送的值放在header上，會直接顯示在URL，因此不適合傳輸隱密的資料，<br> 同時 GET 會被Cache紀錄、且有長度限制</li><li>POST是把資料放在訊息主體內進行傳送，不會被Cache紀錄且對資料長度沒有限制，<br> 因此POST比GET更安全，所以較適合用來傳送隱密性較高的資料</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP Method </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>myFirst(EJS)</title>
      <link href="/2024/10/15/myFirst/"/>
      <url>/2024/10/15/myFirst/</url>
      
        <content type="html"><![CDATA[<h2 id="EJS-Embedded-Javascript"><a href="#EJS-Embedded-Javascript" class="headerlink" title="EJS(Embedded Javascript)"></a>EJS(Embedded Javascript)</h2><p>EJS 的全名是「Embedded Javascript」，顧名思義就是內嵌式的樣板引擎，可以將邏輯與內容直接嵌入到 HTML 頁面上，也就是 EJS 可以讓我們利用 JavaScript 生成 HTML 頁面 ，以下為 app.js 範例 :</p><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><pre class="line-numbers language-none"><code class="language-none">var express &#x3D; require(&#39;express&#39;);var app &#x3D; express();app.set(&#39;view engine&#39;, &#39;ejs&#39;);app.get(&#39;&#x2F;&#39;, function (req, res) &#123;  res.render(&#39;index&#39;, &#123;    game: &#39;Final Fantasy VII&#39;,    category: &#39;&lt;p&gt;&lt;b&gt;Characters:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;&#39;,    characters: [&#39;Cloud&#39;, &#39;Aerith&#39;, &#39;Tifa&#39;, &#39;Barret&#39;]  &#125;);&#125;);app.listen(3000, function() &#123;  console.log(&#39;Example app listening on port 3000!&#39;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h1><h2 id="1"><a href="#1" class="headerlink" title="1. &lt;%&#x3D;%&gt;"></a>1. &lt;%&#x3D;%&gt;</h2><p><strong>將輸出過來的變數當值來使用。</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;%&#x3D; game %&gt;     &#x2F;&#x2F; game 就是 game:&#39;Final Fantasy VII&#39;，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以， <code>&lt;h1&gt;&lt;%= game %&gt;&lt;/h1&gt;</code> &#x3D; <code>&lt;h1&gt;Final Fantasy VII&lt;/h1&gt;。</code><br>你就把它當作像是呼叫函式時，所傳輸過去的『參數』，這樣會比較好理解。</p><h2 id="2"><a href="#2" class="headerlink" title="2. &lt;%-%&gt;"></a>2. &lt;%-%&gt;</h2><p><strong>將輸出過來的變數做保留字元來使用。</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;%- category %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其變數送過來後，會被當作 HTML 語法來使用。<br>因此 <code>&lt;%- category %&gt; 變成 &lt;p&gt;&lt;b&gt;Characters:&lt;/b&gt;&lt;/p&gt;。</code></p><h2 id><a href="#" class="headerlink" title="&lt;% %&gt;"></a>&lt;% %&gt;</h2><p><strong>將標籤內的內容，當作程式邏輯來使用，像是 if else 判斷式、for 迴圈。</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;% for(var i&#x3D;0;i&lt;characters.length;i++) %&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上圖就是迴圈處理，<br>把 characters 陣列裡的成員，依照清單方式一一印出來</p><pre class="line-numbers language-none"><code class="language-none">( &lt;li&gt;&lt;%&#x3D; characters[i]%&gt;&lt;&#x2F;li&gt; )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><h2 id="增加blog到mongodb"><a href="#增加blog到mongodb" class="headerlink" title="增加blog到mongodb"></a>增加blog到mongodb</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;mongoose and mongo sandbox routes  app.get(&#39;&#x2F;add-blog&#39;,(req,res)&#x3D;&gt;&#123;    const blog &#x3D; new Blog(&#123;        title: &#39;new blog2&#39;,        snippet: &#39;about my new blog&#39;,        body: &#39;more about my new blog&#39;    &#125;);    blog.save()        .then((result)&#x3D;&gt;&#123;            res.send(result);        &#125;)        .catch((err)&#x3D;&gt;&#123;           console.log(err);         &#125;)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="顯示所有db資料"><a href="#顯示所有db資料" class="headerlink" title="顯示所有db資料"></a>顯示所有db資料</h2><pre class="line-numbers language-none"><code class="language-none">app.get(&#39;&#x2F;all-blog&#39;,(req,res)&#x3D;&gt;&#123;    Blog.find()        .then((result)&#x3D;&gt;&#123;            res.send(result);        &#125;)        .catch((err)&#x3D;&gt;&#123;            console.log(err);        &#125;);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="選擇單一資料利用findById"><a href="#選擇單一資料利用findById" class="headerlink" title="選擇單一資料利用findById"></a>選擇單一資料利用findById</h2><pre class="line-numbers language-none"><code class="language-none">app.get(&#39;&#x2F;single-blog&#39;,(req,res)&#x3D;&gt;&#123;    Blog.findById(&#39;622f017be5574e63d3fc3bdf&#39;)    .then((result)&#x3D;&gt;&#123;        res.send(result);    &#125;)    .catch((err)&#x3D;&gt;&#123;        console.log(err);    &#125;);&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="res-req"><a href="#res-req" class="headerlink" title="res &#x2F; req"></a><a href="https://expressjs.com/zh-tw/guide/routing.html">res &#x2F; req</a></h1><table><thead><tr><th>方法</th><th>說明</th></tr></thead><tbody><tr><td>res.download()</td><td>提示您提供要下載的檔案。</td></tr><tr><td>res.end()</td><td>結束回應程序。</td></tr><tr><td>res.json()</td><td>傳送 JSON 回應。</td></tr><tr><td>res.jsonp()</td><td>傳送 JSON 回應，並支援 JSONP。</td></tr><tr><td>res.redirect()</td><td>將要求重新導向。</td></tr><tr><td>res.render()</td><td>呈現視圖範本。</td></tr><tr><td>res.send()</td><td>傳送各種類型的回應。</td></tr><tr><td>res.sendFile()</td><td>以八位元組串流形式傳送檔案。</td></tr><tr><td>res.sendStatus()</td><td>設定回應狀態碼，並以回應內文形式傳送其字串表示法。</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/14/hello-world/"/>
      <url>/2024/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
